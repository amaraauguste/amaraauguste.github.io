1) 

Value: 1
Value: 4
Value: 7
Value: 10

2) 

1 : 0.5
2 : 2.0
3 : 4.5
4 : 8.0
5 : 12.5

3) 

public class RandomIntegersCounter {
    public static void main(String [] args) {
        final int SIZE = 20;
        int max = 100;
        int min = 1;
        int[] randomNumbers = new int[SIZE];

        for (int i = 0; i < SIZE; i++) {
            int rand = (int) (Math.random() * (max - min) + min);
            randomNumbers[i] = rand;
        }

        System.out.println("Generated random numbers:");
        System.out.print("{");
        for (int i = 0; i < randomNumbers.length; i++) {
            System.out.print(randomNumbers[i]);
            if(i < randomNumbers.length - 1)
                System.out.print(", ");
        }
        System.out.println("}");
        System.out.println();

        System.out.println("Even numbers count: " + countEvenNumbers(randomNumbers));
        System.out.println("Odd numbers count: " + countOddNumbers(randomNumbers));
        System.out.println("Multiples of 5 count: " + countMultiplesOf5(randomNumbers));
    }


    public static int countEvenNumbers(int [] arr) {
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] % 2 == 0) {
                count++;
            }
        }
        return count;
    }

    public static int countOddNumbers(int [] arr) {
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] % 2 != 0) {
                count++;
            }
        }
        return count;
    }

    public static int countMultiplesOf5(int [] arr) {
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] % 5 == 0) {
                count++;
            }
        }
        return count;
    }
}

4)

for (int i = 0; i < (arr.length+1) / 2; i++) {
	  int temp = arr[i];
      arr[i] = arr[arr.length-i-1];
      arr[arr.length-i-1] = temp;
}

----------------------------------------------------------------------------------------

REVIEW

a) 

for (numberOfIncompletes=0,k=0; k<incompletes.length; k++) {
    if (incompletes[k] == studentID) {
        numberOfIncompletes++;
    }
}

b) 

Enter any number: 3
3 spring
Enter any number: 6
6 summer
Enter any number: 9
9 fall
Enter any number: 12
12 winter
Enter any number: 0
0 error
Enter any number: 15
15 error
Enter any number: 2
2 winter
Enter any number: 5
5 spring
Enter any number: 8
8 summer

--------------------------------------------------------------------------------

WEEK 13

1) 

import java.util.Scanner;
public class CountriesAndCapitals {
    public static void main(String [] args) {
        String [] countries = {"China", "Egypt", "France", "Germany", "India", "Japan", "Kenya", "Mexico", "United Kingdom", "United States"};
        String [] capitals = {"Beijing", "Cairo", "Paris", "Berlin", "New Delhi", "Tokyo", "Nairobi", "Mexico City", "London", "Washington D.C."};
        printMenu(countries);
        Scanner scanner = new Scanner(System.in);
        System.out.print("\n\nPlease enter a country from the list above: ");
        String selectedCountry = scanner.nextLine();
        getCapital(countries, capitals, selectedCountry);
    }

    public static void printMenu(String [] countries) {
        System.out.println("List of Countries:");
        for (String country : countries) {
            System.out.println(country);
        }
    }


    public static void getCapital(String [] countries, String [] capitals, String country) {
        int index = findIndex(countries, country);
        if (index == -1) {
            System.out.println("Error: Country not found in the list.");
        } else {
            System.out.println("The capital of " + country + " is " + capitals[index] + ".");
        }
    }

    public static int findIndex(String [] countries, String country) {
        for (int i = 0; i < countries.length; i++) {
            if (countries[i].equalsIgnoreCase(country)) {
                return i;
            }
        }
        return -1;
    }
}

2)

a) 

Sequential (Linear) search:
2 5 8 12 16 23

b) 

Binary search:
Low    Mid    High
2      16      91
23     56      91
23     23      38

3) 

Sequential (Linear) search:
3 15 25 43

Binary search:
Low    Mid    High
3      50     120
3      15      43
25     25      43
43     43      43

4) 

Binary search:
Low    Mid    High
9      85     1000
9      23       78
9       9       15
15     15       15
